
@Bean
	public Job jobFlow(JobRepository jobRepository,Job pdtLocationJob, Job qualificationpdtInfo, JobLauncher jobLauncher,
	                   JobCompletionDecider decider, 
	                   Job healthServiceJob
	                   ) {
	    return new JobBuilder("jobFlow", jobRepository) 
	                            .start(parallelFlow(jobLauncher, jobRepository, pdtLocationJob, qualificationpdtInfo))
	                            .next(decider).on("COMPLETED").to(jobHealthService1(jobLauncher, jobRepository, healthServiceJob))
	                            .end()
	                            .build();
	}
	
	@Bean
	public Flow parallelFlow(JobLauncher jobLauncher, JobRepository jobRepository, Job pdtLocationJob, Job qualificationpdtInfo ) {
	    return new FlowBuilder<Flow>("parallelFlow")
	            .start(jobProvLocFlow(jobLauncher, jobRepository, pdtLocationJob))
	            .split(pdtExecuter)
	            .add(jobQualificationInfoFlow(jobLauncher, jobRepository, qualificationpdtInfo))
	            .build();
	}
	
	@Bean
	public Flow jobProvLocFlow(JobLauncher jobLauncher, JobRepository jobRepository, Job pdtLocationJob) {
	    return new FlowBuilder<Flow>("jobProvLocFlow1")
	            .start(new JobStepBuilder(new StepBuilder("locationDataFromDB", jobRepository))
	                    .job(pdtLocationJob)
	                    .launcher(jobLauncher)
	                    .build())
	            .build();
	}
	
	@Bean
	public Flow jobQualificationInfoFlow(JobLauncher jobLauncher, JobRepository jobRepository, Job qualificationpdtInfo) {
	    return new FlowBuilder<Flow>("jobQualificationInfoFlow1")
	            .start(new JobStepBuilder(new StepBuilder("qualificationEntityDataFromDB", jobRepository))
	                    .job(qualificationpdtInfo)
	                    .launcher(jobLauncher)
	                    .build())
	            .build();
	}

	
	@Bean
	public Flow jobHealthService1(JobLauncher jobLauncher, JobRepository jobRepository, Job healthServiceJob) {
	    return new FlowBuilder<Flow>("healthService1Flow1")
	            .start(new JobStepBuilder(new StepBuilder("exportHSDataFromDB",jobRepository ))
	                    .job(healthServiceJob)
	                    .launcher(jobLauncher) 
	                    .build())
	            .build();
	}


public class JobCompletionDecider implements JobExecutionDecider{
	@Autowired
	DataSource datasource;
	
//	@Autowired
//	JobExecution jobExecution;
	
	@Override
	
	public FlowExecutionStatus decide(JobExecution jobExecution, StepExecution stepExecution) {
		// TODO Auto-generated method stub
		BatchStatus locationJobStatus = jobExecution.getExecutionContext().get("pdtLocationJob",BatchStatus.class);
		BatchStatus qualificationJobStatus = jobExecution.getExecutionContext().get("qualificationpdtInfo",BatchStatus.class);
		
		System.out.println("Location Job Status-->" + locationJobStatus );
		System.out.println("Qualification Job Status-->" + qualificationJobStatus);
		
		if(locationJobStatus == BatchStatus.COMPLETED && qualificationJobStatus == BatchStatus.COMPLETED)
			return new FlowExecutionStatus("COMPLETED");
		else
			return new FlowExecutionStatus("FAILED");
	}

public void run() throws JobExecutionAlreadyRunningException, JobRestartException, JobInstanceAlreadyCompleteException, JobParametersInvalidException  {
			// Generate Report
		// runJob(mainJob);
		 runJob(jobFlow);

		}

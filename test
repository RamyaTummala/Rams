import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.hl7.fhir.r4.model.Bundle;
import org.hl7.fhir.r4.model.Bundle.BundleEntryComponent;
import org.hl7.fhir.r4.model.Bundle.BundleEntryResponseComponent;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.JdbcTemplate;

import ca.uhn.fhir.parser.IParser;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class CustomQualificationWriterTest {

    @Mock
    private PdtItemService pdtItemService;

    @Mock
    private PdtProvLocationProcessor pdtProvLocationProcessor;

    @Mock
    private BearerTokenCache tokenCache;

    @Mock
    private IParser parser;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private CustomQualificationWriter customQualificationWriter;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testInvokeAPIsAndProcessDBUpdates_Success() {
        // Arrange
        String bearerToken = "sampleBearerToken";
        String bundleJson = "{\"resourceType\":\"Bundle\"}";
        String responseJson = "{\"resourceType\":\"Bundle\",\"entry\":[{\"response\":{\"status\":\"200 OK\",\"location\":\"Organization/1\"}}]}";
        ResponseEntity<String> responseEntity = new ResponseEntity<>(responseJson, HttpStatus.OK);
        Bundle bundle = new Bundle();
        bundle.setId("sampleBundleId");

        List<BundleEntryComponent> entryList = new ArrayList<>();
        BundleEntryComponent entryComponent = new BundleEntryComponent();
        BundleEntryResponseComponent responseComponent = new BundleEntryResponseComponent();
        responseComponent.setStatus("200 OK");
        responseComponent.setLocation("Organization/1");
        entryComponent.setResponse(responseComponent);
        entryList.add(entryComponent);
        bundle.setEntry(entryList);

        when(tokenCache.getToken("DYNAMIC_TOKEN")).thenReturn(bearerToken);
        when(parser.encodeResourceToString(bundle)).thenReturn(bundleJson);
        when(pdtProvLocationProcessor.fireRequestUsigRestTemplate(bearerToken, bundleJson)).thenReturn(responseEntity);
        when(parser.parseResource(Bundle.class, responseJson)).thenReturn(bundle);

        List<String> resourceIds = new ArrayList<>();
        resourceIds.add("1");

        // Act
        customQualificationWriter.invokeAPIsAndProcessDBUpdates(new Date(), resourceIds, bundle, parser);

        // Assert
        verify(pdtItemService, times(1)).updateAllRecordStatus(eq(Constants.STATUS_SUCCESS), any(Date.class), eq(resourceIds));
        verify(pdtItemService, times(1)).addingDataIntoDB(anyList());
    }
}

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.core.JdbcTemplate;

public class CustomQualificationWriterTest {

    @Mock
    private BearerTokenCache tokenCache;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private CustomQualificationWriter customQualificationWriter;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetBearerToken() {
        // Arrange
        String expectedToken = "sampleBearerToken";
        when(tokenCache.getToken("DYNAMIC_TOKEN")).thenReturn(expectedToken);

        // Act
        String actualToken = customQualificationWriter.getBearerToken();

        // Assert
        assertEquals(expectedToken, actualToken);
        verify(tokenCache, times(1)).getToken("DYNAMIC_TOKEN");
    }
}



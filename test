
@Scheduled(cron = "* */15 * * * *")
//	@Scheduled(initialDelay = 1000 * 1, fixedDelay = Long.MAX_VALUE)
	public void runDynamicJob() {
		JobParameters jobParam = new JobParametersBuilder()
				.addString("jobName", "mainJob")
				.addString("jobMod", currentValue)
				.toJobParameters();
		if (isJobRunning("mainJob",jobParam)) {
			System.out.println(
					"Job is already running, skipping this schedule." + String.valueOf(System.currentTimeMillis()));
			return;
		}
		try {
			List<Object[]> listofLtcnIds = pdtRepo.checkForYetToSubmitRecords(submissionStatus);
			if (!listofLtcnIds.isEmpty()) {
				JobParameters jobParameters = new JobParametersBuilder()
						.addString("jobName", "mainJob")
						.addString("jobMod", currentValue)
						//.addLong("time", System.currentTimeMillis())
						.toJobParameters();
				System.out.println("Job Started running " + String.valueOf(System.currentTimeMillis()));
				jobLauncher.run(mainJob, jobParameters);
				System.out.println("Job ran successfully " + String.valueOf(System.currentTimeMillis()));
			}
		} catch (Exception e) {
			logger.error("scheduler error "+e.toString());
			e.printStackTrace();
		}
	}
